{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>ckanext-content is a modern and flexible content management extension for CKAN. It replaces legacy extensions like <code>ckanext-pages</code> and <code>ckanext-showcase</code> with a schema-driven, configurable solution that supports custom content types, file uploads, templating, and URL aliasing.</p> <p>It is highly recommended to use it with ckanext-scheming installed in order to increase the amount of templates, field types, validators and presets you can use to build your Content pages. Check the Usage section for instructions.</p> <p></p>"},{"location":"config_settings/","title":"Config Settings","text":"<p><code>ckanext.content.schemas</code> - (list) Needed to be able to register custom content types besied the default types, example of Usage: <pre><code>ckanext.content.schemas =\n                ckanext.content:schemas/content/page.yaml\n                ckanext.content:schemas/content/blog.yaml\n</code></pre></p> <p><code>ckanext.content.presets</code> - (list) Need to be able to register additional presets (piece of field configurations that use multiple times across the schemas), example of Usage: <pre><code>ckanext.content.presets =\n                ckanext.content:schemas/content/presets.yaml\n                ckanext.scheming:presets.json # Scheming presets is extension enabled\n</code></pre></p> <p><code>ckanext.content.form_snippets_path</code> - (list) An ability to register additional paths to search from <code>form_snippets</code>, beside <code>ckanext.content</code> extension. Example of Usage: <pre><code>ckanext.content.form_snippets_path =\n                content/form_snippets/\n                scheming/form_snippets/ # Scheming form_snippets is extension enabled\n</code></pre></p> <p><code>ckanext.content.display_snippets_path</code> - (list) An ability to register additional paths to search from <code>display_snippets</code>, beside <code>ckanext.content</code> extension. Example of Usage: <pre><code>ckanext.content.display_snippets_path =\n                content/display_snippets/\n                scheming/display_snippets/ # Scheming display_snippets is extension enabled\n</code></pre></p>"},{"location":"extra/","title":"Extra","text":""},{"location":"extra/#menus","title":"Menus","text":"<p>ckanext-content itself, doesn't control or create menu items. In order to have managable Menus nagivation like Header, Footer or Sidebars on the Content pages, use ckanext-menu.</p>"},{"location":"extra/#centralized-files-storage","title":"Centralized files storage","text":"<p>ckanext-content has own file upload fields, but files that should be present across all Content or on any Content pages of specific type like Banners, Backgrounds, Files with infromation, use ckanext-media and add Media field for the Content where you can specify Media item Key that will be an reference to the actual Media File that can be updated independently from Content, but the changes will be reflected on Content pages.</p>"},{"location":"installation/","title":"Installation","text":"<ol> <li> <p>Activate your CKAN virtual environment, for example:</p> <p>. /usr/lib/ckan/default/bin/activate</p> </li> <li> <p>Clone the source and install it on the virtualenv <pre><code>git clone https://github.com/Datashades/ckanext-content.git\ncd ckanext-content\npip install -e .\n</code></pre></p> </li> <li> <p>Add <code>content</code> to the <code>ckan.plugins</code> setting in your CKAN    config file (by default the config file is located at    <code>/etc/ckan/default/ckan.ini</code>).</p> </li> <li> <p>Initialize <code>content</code> table in the DB. <pre><code>ckan -c CKAN_CONFIG_PATH db upgrade -p content\n</code></pre></p> </li> <li> <p>Restart CKAN</p> </li> </ol> <p>This will add default content types and presets. If you plan to register more types or extend templates, validation using ckanext-scheming, check the Usage section in the documentation.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#add-content","title":"Add Content","text":"<p>Go to <code>/content/list</code> on your portal, click <code>Create</code> and choose Content type you want to Add.</p> <p>Fill the fields and click <code>Create</code>.</p>"},{"location":"usage/#register-new-content-types-or-re-define-default","title":"Register new Content types or re-define default","text":"<p>If you used ckanext-scheming before, the process is quite similar to Dataset types schema register.</p> <p>Create and <code>yaml</code> schema file in your custom extension. For example <code>article.yaml</code>.</p> <p>In it specify its type and main fields. Here is an minimal schema config:</p> <pre><code>label: Article\ncontent_type: article\n\ncontent_fields:\n- field_name: title\n  label: Title\n  validators: not_empty unicode_safe\n  form_placeholder: eg. A descriptive title\n\n- field_name: alias\n  label: Alias\n  validators: content_prepare_alias not_empty alias_unique is_relative_path\n  required: true\n  form_snippet: alias.html\n  alias_prefix: /article/\n  alias_source_field: title\n  alias_autogenerate: true\n  form_placeholder: eg. /my-article\n\n- field_name: notes\n  label: Body\n  form_snippet: content_textarea.html\n  display_snippet: html.html\n  form_placeholder: eg. Some useful notes about the data\n  form_attrs:\n    data-module: ckan-content-ckeditor\n\n- field_name: state\n  label: State\n  preset: content_select\n  choices:\n    - value: 'draft'\n      label: 'Draft'\n    - value: 'active'\n      label: 'Published'\n  required: true\n</code></pre> <p>Here is an defition of each item in the schema:</p> <ul> <li>label - Represents the human readable version of the content type.</li> <li>content_type - Type that is going to be stored in the DB for this specific Content type.</li> <li>content_fields - Fields that this Content type will help.</li> </ul> <p>While <code>notes</code> is an optional field, all other fields are required to be present to make the schema work as expected.</p> <p>Required fields:</p> <ul> <li>title - Text field that represent the heading of the future Content.</li> <li>alias - Text field that used to generate an proper URL depending of <code>title</code>.</li> <li>state - Select where you specify whether the Content is publicly accessible or not.</li> </ul> <p>You can modify those fields, add more fields. This will be descibed below in separate section.</p> <p>Attach you newly create schema using <code>ckanext.content.schemas</code> CKAN config. By default it has 2 default types, but you can remove them is not needed or re-define using this config.</p> <pre><code>ckanext.content.schemas = \n                ckanext.content:schemas/content/page.yaml # Default schema\n                ckanext.content:schemas/content/blog.yaml # Default schema\n                ckanext.MY_EXTENSION:PATH_TO_THE_NEW_YAM_FILE/article.yaml\n\n                # Re-define default schema\n                # Copy the original schema into it and modify as you wish\n                #ckanext.MY_EXTENSION:PATH_TO_THE_NEW_YAM_FILE/page.yaml\n</code></pre> <p>Restart CKAN and you should be able to see the new Content type in the Create options.</p>"},{"location":"usage/#fields","title":"Fields","text":"<p>There only two required fields to be setup in order to see your field:</p> <ul> <li> <p>field_name - specifies the field machine name that will be stored in the DB as an key to the field value.</p> </li> <li> <p>label - Ends up being the \"label\" for the field.</p> </li> </ul> <p>All other keys are optional and depending on what kind of field you want to see, what validation it should have, representation on form or the display output.</p>"},{"location":"usage/#aliases","title":"Aliases","text":"<p>Aliases field is using additional field keys and validators specifically designed for ckanext-content.</p> <ul> <li>alias_autogenerate - specifies if alias field will try to generate the Alias by himself using alias_source_field key as an reference to source field. You can set it to \"False\" or remove, so you will be able to setup aliases manually.</li> <li>alias_source_field - specifies an field, where it will try to pull value and try to turn it into proper URL prepared value.</li> <li>alias_prefix - prefix that will be attached to the generated Alias.</li> </ul> <p>Validators:</p> <ul> <li>content_prepare_alias - is used only with alias_autogenerate enabled, otherwise skips the creation process.</li> </ul>"},{"location":"usage/#commonly-used","title":"Commonly used","text":"<ul> <li> <p>validators - key where you spcify how the field will be validated while create/update process. Usually validators are registered in <code>validatiors.py</code> or <code>validation.py</code> files.</p> </li> <li> <p>form_snippet - an template that is used to disaply your field in an specific manner on the form, for example if its going to be just and <code>input</code> or and <code>textarea</code>. Those are usually stored under <code>form_snippet</code> folder, but you can provide additional path.</p> </li> <li> <p>display_snippet - an template that is used to ouput the field value if different ways on your pages, its optional, so if you want to grab your data value straight in the template and disaply is as you want.</p> </li> </ul> <p>Out of the box, ckanext-content offers just a few fields types that you can use:</p> <ul> <li>text</li> <li>textarea</li> <li>select (using preset)</li> <li>file_upload (uploading images and files)</li> </ul>"},{"location":"usage/#extending-the-number-field-options","title":"Extending the number field options","text":"<p>It is highly recommend to add ckanext-scheming, add it to plugins list and register additional path for form_snippet, display_snippet and presets in order to have an access to even bigger amount of different field types that you can create and validators. Check ckanext-scheming for examples.</p> <p>How to do it?</p> <ul> <li>Install ckanext-scheming</li> <li>Add <code>scheming_datasets</code> to the plguins list</li> <li>Using <code>ckanext.content.presets</code> add the scheming default presets list to this config alongside with ckanext-content <pre><code>ckanext.content.presets =\n                ckanext.content:schemas/content/presets.yaml\n                ckanext.scheming:presets.json\n</code></pre></li> <li>Register additional path for <code>form_snippet</code> and <code>display_snippet</code>, to check in scheming extension as well. <pre><code>ckanext.content.form_snippets_path =\n     content/form_snippets/\n     scheming/form_snippets/\n\nckanext.content.display_snippets_path =\n     content/display_snippets/\n     scheming/display_snippets/\n</code></pre></li> </ul> <p>Now you can use scheming validators, templates and presets.</p>"},{"location":"usage/#templating-layouts","title":"Templating (layouts)","text":"<p>Each Content type is using the default Jinja template to disaply the data, but you can register an alternative one per your custom content type.</p> <p>As an example, Blog and Page default types. While Page is using default template <code>content.html</code>, Blog is using own template <code>content_blog.html</code>.</p>"},{"location":"usage/#how-to-register-personal-templates","title":"How to register personal templates?","text":"<ul> <li>Create an path in your custom extension <code>templates</code> folder - <code>content/display</code></li> <li>In this folder create an template with an name like this <code>content_article.html</code>, where <code>content</code> is the prefix and <code>article</code> is your custom content type. This will use it instead of <code>content.html</code> template that is used without the content type specific template.</li> <li>Copy the content of <code>content.html</code> template into your new template and modify it as you wish.</li> </ul>"},{"location":"usage/#working-with-templates","title":"Working with templates","text":"<p>In the default template you can see that the content is called in loop, which is not something that you need for some Content types.</p> <p>Example: <pre><code>{%- for field in schema.content_fields -%}\n    {%- if field.field_name not in exclude_fields\n            and field.display_snippet is not none -%}\n        {%- snippet 'content/snippets/display_field.html',\n            field=field, data=content.data, schema=schema -%}\n    {%- endif -%}\n{%- endfor -%}\n</code></pre></p> <p>You can avoid this and call your fields where needed, when needed individually: <pre><code>If you want to use the display snippet\n\n{%- snippet 'content/snippets/display_field.html', field=h.scheming_field_by_name(fields,'notes'), data=content.data, schema=schema -%}\n\nIf you want to manipulate with the data on your own\n&lt;a class=\"btn btn-primary\" href=\"{{ h.uploaded_file_url(content.data.attached_document) }}\"&gt;\n    {{ 'Download Document' }}\n&lt;/a&gt;\n\nor \n\n{{ content.data.notes }}\n</code></pre></p> <p>Here is an example of default Blog template:</p> <p></p> <p>And modified:</p> <p></p> <p>The main template is extends the <code>page.html</code> template in an way, where you can modify different level of the page.</p>"},{"location":"usage/#search-pages","title":"Search pages","text":"<p>To create an Search page for your content, you'll need to register an Blueprint as usually done in CKAN. There is an small example of Search page that showing Pages content type tiles at <code>/content/search-example-1</code>. Its shown only to Sysadmins.</p> <p></p> <p>You can use this example as an starting point for your custom Search pages. The code is stored at <code>views/simple_search.py</code> -&gt; <code>simple_search_1</code>. It already adds query ability and pagination, other filters can be added depending on your content type and requirements.</p>"}]}